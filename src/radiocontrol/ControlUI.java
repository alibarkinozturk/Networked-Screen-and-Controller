/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package radiocontrol;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.io.IOException;
import static java.lang.Math.atan2;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.geom.Point2D;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author aliba
 */
public class ControlUI extends javax.swing.JFrame {

    final int MAX_Volume = 20;
    final int MIN_Volume = 0;
    final int MAX_FM = 110;
    final int MIN_FM = 90;

    Control control;

    Point fmBCenter, volumeBCenter, fmRefernce, volumeReference, p, newV, oldV, oldF, newF;
    double fmAngle, volumeAngle, fmRatio, volumeRatio, angleDiffFm, angleDiffV, abcAngle, abc2Angle, keepF, keepV;

    public ControlUI() throws Exception {
        control = new Control();
        initComponents();
        drawCircles();

        fmRefernce = new Point((fmButton.getWidth() / 2), 0);
        fmBCenter = new Point((fmButton.getWidth() / 2), (fmButton.getHeight() / 2));

        volumeReference = new Point((volumeButton.getWidth() / 2), 0);

        volumeBCenter = new Point((volumeButton.getWidth() / 2), (volumeButton.getHeight() / 2));
        fmRatio = Math.PI / 18;
        volumeRatio = Math.PI / 3;//60

        oldV = abc2.getLocation();
        oldF = abc.getLocation();
    }

    private void drawCircles() {
        CirclePanel fmCirclePanel = new CirclePanel(fmButton.getHeight() / 2, Color.getHSBColor((float) 1.1, (float) 0.25, (float) 0.3), panel.getBackground(), true, true);
        fmCirclePanel.setBounds(0, 0, fmButton.getWidth(), fmButton.getHeight());
        fmButton.add(fmCirclePanel);
        fmCirclePanel.add(abc);

        CirclePanel volumeCirclePanel = new CirclePanel(volumeButton.getHeight() / 2, Color.getHSBColor((float) 1.1, (float) 0.25, (float) 0.3), panel.getBackground(), true, true);
        volumeCirclePanel.setBounds(0, 0, volumeButton.getWidth(), volumeButton.getHeight());
        volumeButton.add(volumeCirclePanel);
        volumeCirclePanel.add(abc2);

        CirclePanel abcCircle = new CirclePanel(abc.getHeight() / 2, Color.getHSBColor((float) 1.18, (float) 0.2083, (float) 0.5647), abc.getBackground(), false, false);
        abcCircle.setBounds(0, 0, abc.getWidth(), abc.getHeight());
        abc.add(abcCircle);

        CirclePanel abc2Circle = new CirclePanel(abc2.getHeight() / 2, Color.getHSBColor((float) 1.18, (float) 0.2083, (float) 0.5647), abc2.getBackground(), false, false);
        abc2Circle.setBounds(0, 0, abc2.getWidth(), abc2.getHeight());
        abc2.add(abc2Circle);
    }

    private Point findPoint(double angle, JPanel a) {

        double x = (fmBCenter.x) + (35 * Math.cos(angle - Math.PI / 2)) - (abc.getWidth() / 2);
        double y = (fmBCenter.y) + (35 * Math.sin(angle - Math.PI / 2)) - (abc.getHeight() / 2);

        return new Point((int) x, (int) y);
    }

    private double findAngle(Point center, Point p1) {
        int dx = center.x - p1.x;
        int dy = center.y - p1.y;

        return atan2(dy, dx);
    }

    public double getAngleRadian(Point p1, Point p2) {
        double xDiff = p2.x - p1.x;
        double yDiff = p2.y - p1.y;

        //System.out.println(Math.atan2(yDiff, xDiff));
        return (Math.atan2(yDiff, xDiff) + (Math.PI / 2)); // return angle in radians
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        muteIcon = new javax.swing.JLabel();
        powerIcon = new javax.swing.JLabel();
        sleepIcon = new javax.swing.JLabel();
        volumeButton = new javax.swing.JPanel();
        abc2 = new javax.swing.JPanel();
        fmButton = new javax.swing.JPanel();
        abc = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        panel.setBackground(new java.awt.Color(136, 127, 106));
        panel.setMaximumSize(new java.awt.Dimension(100, 100));
        panel.setMinimumSize(new java.awt.Dimension(100, 100));

        muteIcon.setBackground(new java.awt.Color(79, 111, 82));
        muteIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        muteIcon.setText("mute");
        muteIcon.setOpaque(true);
        muteIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                muteIconMouseClicked(evt);
            }
        });

        powerIcon.setBackground(new java.awt.Color(58, 77, 57));
        powerIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        powerIcon.setText("power");
        powerIcon.setOpaque(true);
        powerIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                powerIconMouseClicked(evt);
            }
        });

        sleepIcon.setBackground(new java.awt.Color(200, 20, 20));
        sleepIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sleepIcon.setText("sleep");
        sleepIcon.setToolTipText("");
        sleepIcon.setOpaque(true);
        sleepIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sleepIconMouseClicked(evt);
            }
        });

        volumeButton.setBackground(new java.awt.Color(236, 227, 206));
        volumeButton.setMaximumSize(new java.awt.Dimension(100, 100));
        volumeButton.setMinimumSize(new java.awt.Dimension(100, 100));
        volumeButton.setPreferredSize(new java.awt.Dimension(100, 100));
        volumeButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                volumeButtonMouseDragged(evt);
            }
        });
        volumeButton.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                volumeButtonMouseWheelMoved(evt);
            }
        });

        abc2.setBackground(new java.awt.Color(61, 77, 57));
        abc2.setMaximumSize(new java.awt.Dimension(5, 5));
        abc2.setMinimumSize(new java.awt.Dimension(5, 5));
        abc2.setName(""); // NOI18N
        abc2.setPreferredSize(new java.awt.Dimension(5, 5));

        javax.swing.GroupLayout abc2Layout = new javax.swing.GroupLayout(abc2);
        abc2.setLayout(abc2Layout);
        abc2Layout.setHorizontalGroup(
            abc2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        abc2Layout.setVerticalGroup(
            abc2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout volumeButtonLayout = new javax.swing.GroupLayout(volumeButton);
        volumeButton.setLayout(volumeButtonLayout);
        volumeButtonLayout.setHorizontalGroup(
            volumeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, volumeButtonLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addComponent(abc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        volumeButtonLayout.setVerticalGroup(
            volumeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(volumeButtonLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(abc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        fmButton.setBackground(new java.awt.Color(236, 227, 206));
        fmButton.setMaximumSize(new java.awt.Dimension(100, 100));
        fmButton.setMinimumSize(new java.awt.Dimension(100, 100));
        fmButton.setPreferredSize(new java.awt.Dimension(100, 100));
        fmButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                fmButtonMouseDragged(evt);
            }
        });
        fmButton.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                fmButtonMouseWheelMoved(evt);
            }
        });

        abc.setBackground(new java.awt.Color(61, 77, 57));
        abc.setMaximumSize(new java.awt.Dimension(5, 5));
        abc.setMinimumSize(new java.awt.Dimension(5, 5));
        abc.setPreferredSize(new java.awt.Dimension(5, 5));

        javax.swing.GroupLayout abcLayout = new javax.swing.GroupLayout(abc);
        abc.setLayout(abcLayout);
        abcLayout.setHorizontalGroup(
            abcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        abcLayout.setVerticalGroup(
            abcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fmButtonLayout = new javax.swing.GroupLayout(fmButton);
        fmButton.setLayout(fmButtonLayout);
        fmButtonLayout.setHorizontalGroup(
            fmButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fmButtonLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(abc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        fmButtonLayout.setVerticalGroup(
            fmButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fmButtonLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addComponent(abc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("FM");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Volume");

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(fmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(sleepIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(powerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(muteIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(muteIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sleepIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(powerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sleepIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sleepIconMouseClicked
        try {
            control.setSleep();

            if (control.sleep) {
                sleepIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                sleepIcon.setBackground(new java.awt.Color(79, 111, 82));
            }
        } catch (IOException ex) {
            Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        // System.out.println(control.isSleep());
    }//GEN-LAST:event_sleepIconMouseClicked

    private void powerIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_powerIconMouseClicked
       
        try {
            control.setPower();
        } catch (IOException ex) {
            Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_powerIconMouseClicked

    private void muteIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_muteIconMouseClicked
       if(!control.sleep){
        try {
            control.setMute();
            if (control.mute) {
                muteIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                muteIcon.setBackground(new java.awt.Color(79, 111, 82));
            }
        } catch (IOException ex) {
            Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println(control.isMute());
       }
    }//GEN-LAST:event_muteIconMouseClicked

    private void volumeButtonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeButtonMouseDragged
if(!control.sleep){
 p = findPoint(getAngleRadian(volumeBCenter, evt.getPoint()), abc2);
        angleDiffV = (Math.toDegrees(getAngleRadian(volumeBCenter, p) + Math.PI)) - (Math.toDegrees(getAngleRadian(volumeBCenter, oldV) + Math.PI));
        //System.out.println("p: " + Math.toDegrees(getAngleRadian(volumeBCenter, p) + Math.PI) + "\noldPointV: " + Math.toDegrees(getAngleRadian(volumeBCenter, oldPointVolume) + Math.PI) + "\n\tangleDiff: " + angleDiff);

        if (angleDiffV < 20 && angleDiffV > -20) {
            keepV += angleDiffV;
        }

        if (keepV > Math.toDegrees(volumeRatio)) {
            try {
                control.volumeUp();
                keepV = 0;
                System.out.println("volumeAngle:" + volumeAngle);
                volumeAngle += volumeRatio;
                abc2.setLocation(findPoint(volumeAngle, abc2));
                
                if (control.mute) {
                muteIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                muteIcon.setBackground(new java.awt.Color(79, 111, 82));
            }
            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (keepV < -Math.toDegrees(volumeRatio)) {
            try {
                control.volumeDown();
                keepV = 0;
                System.out.println("volumeAngle:" + volumeAngle);

                volumeAngle -= volumeRatio;
                abc2.setLocation(findPoint(volumeAngle, abc2));
                
                if (control.mute) {
                muteIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                muteIcon.setBackground(new java.awt.Color(79, 111, 82));
            }
            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //System.out.println("\n\n volumeAngle" + volumeAngle);
        oldV = p;
}
    }//GEN-LAST:event_volumeButtonMouseDragged

    private void fmButtonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fmButtonMouseDragged
if(!control.sleep){
 p = findPoint(getAngleRadian(fmBCenter, evt.getPoint()), abc);
        angleDiffFm = (Math.toDegrees(getAngleRadian(fmBCenter, p) + Math.PI)) - (Math.toDegrees(getAngleRadian(fmBCenter, oldF) + Math.PI));
        //System.out.println("p: " + Math.toDegrees(getAngleRadian(volumeBCenter, p) + Math.PI) + "\noldPointV: " + Math.toDegrees(getAngleRadian(volumeBCenter, oldPointVolume) + Math.PI) + "\n\tangleDiff: " + angleDiff);

        if (angleDiffFm < 20 && angleDiffFm > -20) {
            keepF += angleDiffFm;
        }

        if (keepF > Math.toDegrees(fmRatio)) {
            try {
                control.fmUp();
                keepF = 0;
                System.out.println("fmAngle:" + fmAngle);

                fmAngle += fmRatio;
                abc.setLocation(findPoint(fmAngle, abc));
            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (keepF < -Math.toDegrees(fmRatio)) {
            try {
                control.fmDown();
                keepF = 0;
                System.out.println("fmAngle:" + fmAngle);

                fmAngle -= fmRatio;
                abc.setLocation(findPoint(fmAngle, abc));

            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //System.out.println("\n\n volumeAngle" + volumeAngle);
        oldF = p;
}
    }//GEN-LAST:event_fmButtonMouseDragged

    private void volumeButtonMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_volumeButtonMouseWheelMoved
        if(!control.sleep){if (evt.getWheelRotation() == -1) {
            try {
                control.volumeUp();
                volumeAngle += volumeRatio;
                newV = findPoint(volumeAngle, abc2);
                abc2.setLocation(findPoint(volumeAngle, abc2));
                if (control.mute) {
                muteIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                muteIcon.setBackground(new java.awt.Color(79, 111, 82));
            }

            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                control.volumeDown();
                volumeAngle -= volumeRatio;
                newV = findPoint(volumeAngle, abc2);
                abc2.setLocation(findPoint(volumeAngle, abc2));
                if (control.mute) {
                muteIcon.setBackground(new java.awt.Color(200, 20, 20));
            } else {
                muteIcon.setBackground(new java.awt.Color(79, 111, 82));
            }

            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        oldV = newV;}
    }//GEN-LAST:event_volumeButtonMouseWheelMoved

    private void fmButtonMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_fmButtonMouseWheelMoved

      if(!control.sleep){
      
        if (evt.getWheelRotation() == -1) {
            try {
                control.fmUp();
                fmAngle += fmRatio;
                abc.setLocation(findPoint(fmAngle, abc));
            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                control.fmDown();
                fmAngle -= fmRatio;
                abc.setLocation(findPoint(fmAngle, abc));
            } catch (IOException ex) {
                Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


      }
    }//GEN-LAST:event_fmButtonMouseWheelMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ControlUI().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ControlUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel abc;
    private javax.swing.JPanel abc2;
    private javax.swing.JPanel fmButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel muteIcon;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel powerIcon;
    private javax.swing.JLabel sleepIcon;
    private javax.swing.JPanel volumeButton;
    // End of variables declaration//GEN-END:variables
}
